<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace ：命名空间，用于隔离sql语句，后面mapper代理开发时，会有另一层非常重要的作用。 -->
<mapper namespace="com.baoxina.mybatis.junior.mapper.UserMapper">
	<!-- 
		id:唯一标识sql,将sql语句封装到mappedStatement对象中，所以id称为statement的id
		parameterType:指定输入参数的类型，这里指定int型
		parameterMap:早期版本的东西，类似于parameterType，现在很少用
		#{}:表示一个占位符
		#{id}:其中的id表示接收输入的参数，参数名称就是id,如果输入参数类型是简单类型，#{}中的参数名可以是任意的，可以是value或者其他名称
		resultType:指定sql输出结果所映射的java类型，select指定resultType表示将单条记录映射成的java类型	
	 -->
	<select id="findUserById" parameterType="int" resultType="com.baoxina.mybatis.junior.po.User"> 
		select * from user where id = #{id}
	</select>
	
	<!-- 根据用户名模糊查询 ，可能返回多条记录-->
	<!-- resultType:表示将单条记录映射成的java类型 -->
	<!-- ${}:表示拼接sql串，将接收到参数的内容不加任何修饰的拼接在sql中 -->
	<!-- 使用${}拼接sql会引起sql注入 不建议使用-->
	<!-- ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value -->
	<select id="findUsersByName" parameterType="java.lang.String" resultType="com.baoxina.mybatis.junior.po.User">
		select * from user where name like '${value}%'
	</select>
	
	
	<insert id="insertUser" parameterType="com.baoxina.mybatis.junior.po.User">
		<!-- 将插入数据的主键返回，返回到user对象当中 -->
		<!-- SELECT LAST_INSER_ID() 只适用于自增主键       SELECT uuid() 适用于uuid主键(order=BEFORE)-->
		<!-- keyProperty:将查询到的主键值设置到parameterType指定对象的哪个属性中  -->
		<!-- order:相对于insert语句的顺序 -->
		<!-- resultType:指定SELECT LAST_INSER_ID()的结果类型 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into user(name,age) values(#{name},#{age})
	</insert>
	
	<delete id="deleteUserById" parameterType="java.lang.Integer">
		delete from user where id = #{id}
	</delete>
	
	
	<update id="updateUser" parameterType="com.baoxina.mybatis.junior.po.User">
		update user set name=#{name},age=#{age} where id=#{id}
	</update>
</mapper>